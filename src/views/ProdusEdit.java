/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import java.awt.event.ActionEvent;
import java.util.List;
import java.util.UUID;
import javax.swing.JFrame;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import models.produs.Culoare;
import models.produs.DimensiuneCulori;
import models.produs.TranslateProdus;
import services.EditCoduriApplicator;
import services.EditCoduriService;
import services.EditCuloriApplicator;
import services.EditCuloriService;
import services.EditImagineDefaultApplicator;
import services.EditImagineDefaultService;
import services.EditSimpleStringListsApplicator;
import services.EditSimpleStringListsService;
import services.EditTranslateProdusDescrieriApplicator;
import services.ProdusEditService;
import services.interfaces.FormListenerInterface;
import services.interfaces.ProdusEditFormInterface;
import views.edit.EditTranslateProdusDescrieriForm;
import views.edit.EditSimpleStringListsForm;
import services.interfaces.EventConfirmationListener;
import views.edit.EditCoduriForm;
import views.edit.EditCuloriForm;
import views.edit.EditImagineDefaultForm;

/**
 *
 * @author Manel
 */
public class ProdusEdit extends javax.swing.JFrame implements ProdusEditFormInterface, FormListenerInterface {

    EventConfirmationListener listener;
    ProdusEditService service;

    /**
     * Creates new form ProdusEdit
     *
     * @param service
     */
    public ProdusEdit(ProdusEditService service) {
        initComponents();
        this.service = service;

        placeholderTextField1.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent de) {
                numeTextFieldChanged(placeholderTextField1.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                numeTextFieldChanged(placeholderTextField1.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                numeTextFieldChanged(placeholderTextField1.getText());
            }
        });
        jTextArea1.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent de) {
                descriereTextAreaChanged(jTextArea1.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                descriereTextAreaChanged(jTextArea1.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                descriereTextAreaChanged(jTextArea1.getText());
            }
        });
        placeholderTextField3.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent de) {
                umTextFieldChanged(placeholderTextField3.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                umTextFieldChanged(placeholderTextField3.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                umTextFieldChanged(placeholderTextField3.getText());
            }
        });
    }

    @Override
    public void setListener(EventConfirmationListener listener) {
        this.listener = listener;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        placeholderTextField1 = new views.PlaceholderTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        placeholderTextField3 = new views.PlaceholderTextField();
        jPanel1 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        placeholderTextField1.setPlaceholder("Nume produs");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("Descriere");

        placeholderTextField3.setPlaceholder("um");

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jButton5.setText("Traduceri descriere si nume");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5);

        jButton3.setText("Dimensiuni");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);

        jButton7.setText("Categorii");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton7);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jButton6.setText("Similare");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton6);

        jButton4.setText("Culori");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4);

        jButton8.setText("Coduri");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton8);

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        jButton9.setText("Imagini");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton9);

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel3.add(jSeparator4);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel3.add(jSeparator2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(placeholderTextField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
                    .addComponent(placeholderTextField3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(placeholderTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(placeholderTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        listener.onConfirm(service.getProdusCopy());
        listener.onFinish(service.getProdusCopy());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        listener.onCancel();
        listener.onFinish(null);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        translateButtonPressed(evt);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        dimensiuniPressed(evt);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        categoriiPressed(evt);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        similarePressed(evt);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        culoriPressed(evt);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        coduriPressed(evt);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        imagineDefaultPressed(evt);
    }//GEN-LAST:event_jButton9ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButton1;
    public javax.swing.JButton jButton2;
    public javax.swing.JButton jButton3;
    public javax.swing.JButton jButton4;
    public javax.swing.JButton jButton5;
    public javax.swing.JButton jButton6;
    public javax.swing.JButton jButton7;
    public javax.swing.JButton jButton8;
    public javax.swing.JButton jButton9;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel2;
    public javax.swing.JPanel jPanel3;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JSeparator jSeparator2;
    public javax.swing.JSeparator jSeparator4;
    public javax.swing.JTextArea jTextArea1;
    public views.PlaceholderTextField placeholderTextField1;
    public views.PlaceholderTextField placeholderTextField3;
    // End of variables declaration//GEN-END:variables

    @Override
    public void numeTextFieldChanged(String newValue) {
        service.numeChanged(newValue);
    }

    @Override
    public void umTextFieldChanged(String newValue) {
        service.umChanged(newValue);
    }

    @Override
    public void descriereTextAreaChanged(String newValue) {
        service.descriereChanged(newValue);
    }

    public void toFront(JFrame toDispose) {
        setEnabled(true);
        toFront();
        toDispose.dispose();
    }

    @Override
    public void translateButtonPressed(ActionEvent e) {
        EditTranslateProdusDescrieriForm translateProdusForm = new EditTranslateProdusDescrieriForm();
        translateProdusForm.setLocationRelativeTo(this);
        EditTranslateProdusDescrieriApplicator descrieriApplicator = new EditTranslateProdusDescrieriApplicator(translateProdusForm);
        descrieriApplicator.autoCompleteData(service.getProdusCopy().translate);
        setEnabled(false);
        translateProdusForm.setVisible(true);
        translateProdusForm.setListener(new EventConfirmationListener() {
            @Override
            public void onConfirm(Object translateObject) {
                TranslateProdus translate = (TranslateProdus) translateObject;
                service.translateChanged(translate);
            }

            @Override
            public void onCancel() {

            }

            @Override
            public void onFinish(Object translateObject) {
                toFront(translateProdusForm);
            }
        });
    }

    @Override
    public void dimensiuniPressed(ActionEvent e) {
        EditSimpleStringListsService dimensiuniService = new EditSimpleStringListsService();
        EditSimpleStringListsForm dimensiuniForm = new EditSimpleStringListsForm(dimensiuniService);
        dimensiuniForm.setLocationRelativeTo(this);
        EditSimpleStringListsApplicator dimensiuniApplicator = new EditSimpleStringListsApplicator(dimensiuniForm, EditSimpleStringListsApplicator.Types.Default);
        dimensiuniService.setApplicator(dimensiuniApplicator);
        dimensiuniApplicator.autoCompleteData(service.getProdusCopy().dimensiuni);
        dimensiuniForm.setVisible(true);
        setEnabled(false);
        dimensiuniForm.setListener(new EventConfirmationListener() {
            @Override
            public void onConfirm(Object p) {
                List<String> dimensiuni = (List<String>) p;
                service.dimensiuniChanged(dimensiuni);
            }

            @Override
            public void onCancel() {
            }

            @Override
            public void onFinish(Object o) {
                toFront(dimensiuniForm);
            }
        });
    }

    @Override
    public void categoriiPressed(ActionEvent e) {
        EditSimpleStringListsService categoriiService = new EditSimpleStringListsService();
        EditSimpleStringListsForm categoriiForm = new EditSimpleStringListsForm(categoriiService);
        categoriiForm.setLocationRelativeTo(this);
        EditSimpleStringListsApplicator categoriiApplicator = new EditSimpleStringListsApplicator(categoriiForm, EditSimpleStringListsApplicator.Types.Categorii);
        categoriiService.setApplicator(categoriiApplicator);
        categoriiApplicator.autoCompleteData(service.getProdusCopy().categorii);
        categoriiForm.setVisible(true);
        setEnabled(false);
        categoriiForm.setListener(new EventConfirmationListener() {
            @Override
            public void onConfirm(Object p) {
                List<UUID> categorii = (List<UUID>) p;
                service.categoriiChanged(categorii);
            }

            @Override
            public void onCancel() {
            }

            @Override
            public void onFinish(Object o) {
                toFront(categoriiForm);
            }
        });
    }
    
    @Override
    public void similarePressed(ActionEvent e) {
        EditSimpleStringListsService similareService = new EditSimpleStringListsService(service.getProduseCopy());
        EditSimpleStringListsForm similareForm = new EditSimpleStringListsForm(similareService);
        similareForm.setLocationRelativeTo(this);
        EditSimpleStringListsApplicator similareApplicator = new EditSimpleStringListsApplicator(similareForm, EditSimpleStringListsApplicator.Types.Similare);
        similareService.setApplicator(similareApplicator);
        similareApplicator.autoCompleteData(service.getProduseSimilareNames());
        similareForm.setVisible(true);
        setEnabled(false);
        similareForm.setListener(new EventConfirmationListener() {
            @Override
            public void onConfirm(Object p) {
                List<UUID> similare = (List<UUID>) p;
                service.similareChanged(similare);
            }

            @Override
            public void onCancel() {
            }

            @Override
            public void onFinish(Object o) {
                toFront(similareForm);
            }
        });
    }

    @Override
    public void culoriPressed(ActionEvent e) {
        EditCuloriService culoriService = new EditCuloriService(service.getProdusCopy().culori, service.getProdusCopy());
        EditCuloriForm culoriForm = new EditCuloriForm(culoriService);
        EditCuloriApplicator culoriApplicator = new EditCuloriApplicator(culoriForm);
        culoriService.setApplicator(culoriApplicator);
        culoriApplicator.autoCompleteData(service.getProdusCopy().culori);
        culoriForm.setVisible(true);
        setEnabled(false);
        culoriForm.setListener(new EventConfirmationListener() {
            @Override
            public void onConfirm(Object p) {
                List<Culoare> culori = (List<Culoare>) p;
                service.culoriChanged(culori);
            }

            @Override
            public void onCancel() {

            }

            @Override
            public void onFinish(Object o) {
                toFront(culoriForm);
            }
        });
    }

    @Override
    public void coduriPressed(ActionEvent e) {
        EditCoduriService coduriService = new EditCoduriService(service.getProdusCopy().coduriSiPreturi, service.getProdusCopy());
        EditCoduriForm coduriForm = new EditCoduriForm(coduriService);
        EditCoduriApplicator coduriApplicator = new EditCoduriApplicator(coduriForm);
        coduriService.setApplicator(coduriApplicator);
        coduriApplicator.autoCompleteData(service.getProdusCopy().coduriSiPreturi);
        setEnabled(false);
        coduriForm.setVisible(true);
        coduriForm.setListener(new EventConfirmationListener() {
            @Override
            public void onConfirm(Object p) {
                List<DimensiuneCulori> dimensiuneCulori = (List<DimensiuneCulori>) p;
                service.coduriSiPreturiChanged(dimensiuneCulori);
            }

            @Override
            public void onCancel() {
            }

            @Override
            public void onFinish(Object o) {
                toFront(coduriForm);
            }
        });
    }

    @Override
    public void imagineDefaultPressed(ActionEvent e) {
        EditImagineDefaultService imagineDefaultService = new EditImagineDefaultService(service.getProdusCopy().imagineDefault, service.getProdusCopy().palleteType);
        EditImagineDefaultForm editImagineDefaultForm = new EditImagineDefaultForm(imagineDefaultService);
        EditImagineDefaultApplicator imagineDefaultApplicator = new EditImagineDefaultApplicator(editImagineDefaultForm);
        imagineDefaultService.setApplicator(imagineDefaultApplicator);
        imagineDefaultApplicator.autoCompleteData(service.getProdusCopy());
        setEnabled(false);
        editImagineDefaultForm.setVisible(true);
        editImagineDefaultForm.setListener(new EventConfirmationListener() {
            @Override
            public void onConfirm(Object p) {
                Object[] result = (Object[]) p;
                service.imagineDefaultChanged((String) result[0]);
                service.palleteTypeChanged((long) result[1]);
            }

            @Override
            public void onCancel() {
            }

            @Override
            public void onFinish(Object o) {
                toFront(editImagineDefaultForm);
            }
        });
    }
}
